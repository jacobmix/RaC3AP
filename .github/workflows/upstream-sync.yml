name: Sync Fork with Upstream

on:
  schedule:
    - cron: '0 3,15 * * *'    # 3 AM and 3 PM UTC
  workflow_dispatch:          # allow manual runs

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetch full history
          ref: main        # start from main branch

      - name: Set up Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/Taoshix/RaC3AP.git
          git fetch upstream

      - name: Fetch all branches from origin
        run: |
          git fetch origin
          git branch -r

      - name: Merge upstream changes into main and staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          changes_detected=false

          for branch in main staging; do
            echo "üîÑ Syncing branch: $branch"

            # Try to checkout local branch; create it if missing
            if git show-ref --verify --quiet refs/heads/$branch; then
              git checkout $branch
            else
              echo "‚ÑπÔ∏è Local branch '$branch' missing. Creating from origin/$branch (if exists)..."
              if git show-ref --verify --quiet refs/remotes/origin/$branch; then
                git checkout -b $branch origin/$branch
              else
                echo "‚ö†Ô∏è No local or remote branch '$branch' ‚Äî skipping."
                continue
              fi
            fi

            # Save commits before merge for comparison
            before_commit=$(git rev-parse HEAD)

            # Merge upstream branch if it exists
            if git show-ref --verify --quiet refs/remotes/upstream/$branch; then
              git merge upstream/$branch --no-edit || true
              after_commit=$(git rev-parse HEAD)

              # Push only if new commits were merged
              if [ "$before_commit" != "$after_commit" ]; then
                git push origin $branch
                echo "‚úÖ Pushed updated $branch"
                changes_detected=true
                echo "updated_branch=$branch" >> $GITHUB_ENV
              else
                echo "‚ÑπÔ∏è No new commits for $branch"
              fi
            else
              echo "‚ö†Ô∏è Upstream branch '$branch' does not exist ‚Äî skipping."
            fi
          done

          echo "changes_detected=$changes_detected" >> $GITHUB_ENV

      - name: Install GitHub CLI
        if: env.changes_detected == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          echo "‚úÖ GitHub CLI installed"

      - name: Trigger Build Workflow
        if: env.changes_detected == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for branch in main staging; do
            echo "üöÄ Triggering build workflow for $branch"
            gh api repos/${{ github.repository }}/dispatches \
              --method POST \
              --field event_type=trigger-build-apworld \
              --raw-field client_payload="{\"branch\":\"$branch\"}" \
              || echo "‚ö†Ô∏è Dispatch failed for $branch"
          done
