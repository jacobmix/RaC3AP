name: Build and Release APWorld

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-build-apworld]

jobs:
  build:
    runs-on: windows-latest

    outputs:
      branch: ${{ steps.branch.outputs.branch }}
      proceed: ${{ steps.changes.outputs.proceed }}
      skip_reason: ${{ steps.changes.outputs.skip_reason }}

    steps:
      - name: Determine branch to build
        id: branch
        shell: bash
        run: |
          branch="${{ github.event.client_payload.branch }}"
          if [ -z "$branch" ]; then
            branch="${GITHUB_REF#refs/heads/}"
          fi
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "üèóÔ∏è Building branch: $branch"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.branch.outputs.branch }}

      - name: Check for relevant changes
        id: changes
        shell: bash
        run: |
          branch="${{ steps.branch.outputs.branch }}"
          echo "üîç Checking for relevant changes since last origin/${branch}..."
          git fetch origin "${branch}"

          current_commit=$(git rev-parse HEAD)

          # Safely determine previous commit
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            previous_commit=$(git rev-parse HEAD^)
          else
            echo "‚ö†Ô∏è No previous commit found (first commit on branch)."
            previous_commit=""
          fi

          echo "Current commit:  $current_commit"
          echo "Previous commit: ${previous_commit:-<none>}"

          # Gather changed files safely
          if [ -n "$previous_commit" ]; then
            changed_files=$(git diff --name-only "$previous_commit" "$current_commit" || true)
          else
            changed_files=$(git show --pretty="" --name-only HEAD || true)
          fi

          echo "Changed files:"
          echo "$changed_files"

          # Ignore commits that only change workflow or README files
          relevant_changes=false
          skip_reason=""
          for file in $changed_files; do
            if [[ ! "$file" =~ ^\.github/workflows/ && "$file" != "README.md" ]]; then
              relevant_changes=true
              break
            fi
          done

          if [ "$relevant_changes" = false ]; then
            if echo "$changed_files" | grep -q "^\.github/workflows/"; then
              skip_reason="Workflow-only changes"
            elif echo "$changed_files" | grep -q "^README.md"; then
              skip_reason="README-only changes"
            else
              skip_reason="No relevant code changes"
            fi
            echo "üü° Skipping build ‚Äî reason: $skip_reason"
            echo "proceed=false" >> $GITHUB_OUTPUT
            echo "skip_reason=$skip_reason" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "‚úÖ Relevant changes detected ‚Äî proceed with build/release."
          echo "proceed=true" >> $GITHUB_OUTPUT
          echo "skip_reason=" >> $GITHUB_OUTPUT

      - name: Log skipped build
        if: steps.changes.outputs.proceed == 'false'
        run: |
          echo "### üü° Build Skipped" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ steps.changes.outputs.skip_reason }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This commit only changed ignored files (e.g., workflows or README). No build or release was triggered." >> $GITHUB_STEP_SUMMARY

      - name: Run PowerShell build script
        if: steps.changes.outputs.proceed == 'true'
        run: ./build_apworld.ps1
        shell: pwsh

      - name: Upload build artifact
        if: steps.changes.outputs.proceed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: rac3.apworld
          path: ./rac3.apworld

  release:
    needs: build
    if: needs.build.outputs.proceed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.build.outputs.branch }}

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: rac3.apworld
          path: .

      - name: Determine next semantic version
        id: semver
        shell: bash
        run: |
          branch="${{ needs.build.outputs.branch }}"
          git fetch --tags

          # Get latest version
          if [[ "$branch" == "main" ]]; then
            latest_tag=$(git tag --sort=-v:refname | grep -v -- '-pre' | head -n 1)
            [ -z "$latest_tag" ] && latest_tag="v0.0.0"
            IFS='.' read -r major minor patch <<< "${latest_tag//v/}"
            minor=$((minor + 1))
            patch=0
            version="${major}.${minor}.${patch}"
          else
            # staging ‚Üí bump from latest (including pre-releases)
            latest_tag=$(git tag --sort=-v:refname | head -n 1)
            [ -z "$latest_tag" ] && latest_tag="v0.0.0"
            IFS='.' read -r major minor patch <<< "${latest_tag//v/}"
            patch=$((patch + 1))
            version="${major}.${minor}.${patch}-pre"
          fi

          echo "‚úÖ Next version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Create release notes
        id: notes
        run: |
          repo_url="https://github.com/${{ github.repository }}"
          branch="${{ steps.semver.outputs.branch }}"
          new_tag="v${{ steps.semver.outputs.version }}"
          short_sha=$(git rev-parse --short HEAD)
          commit_msg=$(git log -1 --pretty=%B)

          changelog="**Changelog:** ${repo_url}/commits/${branch}"

          cat <<EOF > release_notes.md
          ## RaC3 APWorld ${new_tag}

          **Branch:** ${branch}  
          **Commit:** ${short_sha}  
          **Date:** $(date -u +"%Y-%m-%d %H:%M UTC")

          ### Summary
          - ${commit_msg}

          ### Notes
          This release was automatically generated from the **${branch}** branch.  
          Latest (main) releases are recommended as pre-releases (staging) may contain experimental or in-progress changes.

          ${changelog}

          ### If a location is broken and does not get sent out
          Go to the server console (local or web) and use:
          \`/send_location <player_name> <location>\`
          Example: \`/send_location TaoshiRaC3 "Crash Site: Infobot: Aridia"\`
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: rac3.apworld
          tag_name: v${{ steps.semver.outputs.version }}
          name: "RaC3 APWorld v${{ steps.semver.outputs.version }}"
          body_path: release_notes.md
          prerelease: ${{ contains(steps.semver.outputs.version, '-pre') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
