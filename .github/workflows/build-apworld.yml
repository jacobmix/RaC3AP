name: Build and Release APWorld

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-build-apworld]

jobs:
  build:
    runs-on: windows-latest

    outputs:
      branch: ${{ steps.branch.outputs.branch }}

    steps:
      - name: Determine branch to build
        id: branch
        shell: bash
        run: |
          # Prefer repository_dispatch payload branch; fallback to current ref
          branch="${{ github.event.client_payload.branch }}"
          if [ -z "$branch" ]; then
            branch="${GITHUB_REF#refs/heads/}"
          fi
          echo "Branch to build: $branch"
          echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch.outputs.branch }}

      - name: Run PowerShell build script
        shell: pwsh
        run: ./build_apworld.ps1

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: rac3.apworld
          path: ./rac3.apworld

  release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.branch == 'main' || needs.build.outputs.branch == 'staging'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build.outputs.branch }}

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: rac3.apworld
          path: .

      - name: Determine next semantic version
        id: semver
        shell: bash
        run: |
          git fetch --tags
          branch="${{ needs.build.outputs.branch }}"
          echo "Branch for versioning: $branch"

          if [[ "$branch" == "staging" ]]; then
            # Find latest pre-release (ending in -pre)
            latest_pre=$(git tag --sort=-v:refname | grep -- '-pre$' | head -n 1)
            base_tag=${latest_pre:-"v0.0.0-pre"}
            echo "Latest pre-release: $base_tag"

            IFS='.' read -r major minor patch <<< "${base_tag//[!0-9.]/}"
            patch=$((patch + 1))
            version="${major}.${minor}.${patch}-pre"

          else
            # Find latest stable release (no -pre)
            latest_tag=$(git tag --sort=-v:refname | grep -v '\-pre$' | head -n 1)
            base_tag=${latest_tag:-"v0.0.0"}
            echo "Latest stable release: $base_tag"

            IFS='.' read -r major minor patch <<< "${base_tag//[!0-9.]/}"
            minor=$((minor + 1))
            patch=0
            version="${major}.${minor}.0"
          fi

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "✅ New version: v$version"

      - name: Create release notes
        id: notes
        run: |
          repo_url="https://github.com/${{ github.repository }}"
          new_tag="v${{ steps.semver.outputs.version }}"
          branch="${{ steps.semver.outputs.branch }}"

          short_sha=$(git rev-parse --short HEAD)
          commit_msg=$(git log -1 --pretty=%B)

          changelog="*(Automatic build – see commit history for details)*"

          cat <<EOF > release_notes.md
          ## RaC3 APWorld ${new_tag}

          **Branch:** ${branch}  
          **Commit:** ${short_sha}  
          **Date:** $(date -u +"%Y-%m-%d %H:%M UTC")

          ### Summary
          - Commit message: ${commit_msg}

          ### Notes
          This release was automatically generated from the **${branch}** branch.  
          Pre-releases (staging) may contain experimental or in-progress changes.

          ${changelog}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: rac3.apworld
          tag_name: v${{ steps.semver.outputs.version }}
          name: "RaC3 APWorld v${{ steps.semver.outputs.version }}"
          body_path: release_notes.md
          prerelease: ${{ contains(steps.semver.outputs.version, '-pre') }}
          make_latest: ${{ !contains(steps.semver.outputs.version, '-pre') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
