name: Build and Release APWorld

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-build-apworld]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Determine branch to build
        id: branch
        shell: bash
        run: |
          # Use repository_dispatch payload branch if available, otherwise fallback to current ref
          branch="${{ github.event.client_payload.branch }}"
          if [ -z "$branch" ]; then
            branch="${GITHUB_REF#refs/heads/}"
          fi
          echo "Branch to build: $branch"
          echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch.outputs.branch }}

      - name: Run PowerShell build script
        run: ./build_apworld.ps1
        shell: pwsh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: rac3.apworld
          path: ./rac3.apworld

  release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.branch == 'main' || needs.build.outputs.branch == 'staging'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.build.outputs.branch }}

      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: rac3.apworld
          path: .

      - name: Determine next semantic version
        id: semver
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags "$(git rev-list --tags --max-count=1)" 2>/dev/null || echo "0.0.0")

          echo "Latest tag: $latest_tag"

          IFS='.' read -r major minor patch <<< "${latest_tag//v/}"
          if [ -z "$major" ]; then
            major=0; minor=0; patch=0
          fi

          # Determine branch for release
          branch="${{ github.event.client_payload.branch }}"
          if [ -z "$branch" ]; then
            branch="${GITHUB_REF#refs/heads/}"
          fi

          if [[ "$branch" == "staging" ]]; then
            patch=$((patch + 1))
            version="${major}.${minor}.${patch}-pre"
          else
            patch=$((patch + 1))
            version="${major}.${minor}.${patch}"
          fi

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Create release notes
        id: notes
        run: |
          repo_url="https://github.com/${{ github.repository }}"
          prev_tag="${{ steps.semver.outputs.latest_tag }}"
          new_tag="v${{ steps.semver.outputs.version }}"
          branch="${{ steps.semver.outputs.branch }}"

          short_sha=$(git rev-parse --short HEAD)
          commit_msg=$(git log -1 --pretty=%B)

          if [ "$prev_tag" != "0.0.0" ]; then
            changelog="**Changelog:** ${repo_url}/compare/${prev_tag}...${new_tag}"
          else
            changelog="*(First release â€“ no changelog available)*"
          fi

          cat <<EOF > release_notes.md
          ## RaC3 APWorld ${new_tag}

          **Branch:** ${branch}  
          **Commit:** ${short_sha}  
          **Date:** $(date -u +"%Y-%m-%d %H:%M UTC")

          ### Summary
          - Commit message: ${commit_msg}

          ### Notes
          This release was automatically generated from the **${branch}** branch.  
          For pre-releases (staging), builds may contain experimental or in-progress changes.

          ${changelog}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: rac3.apworld
          tag_name: v${{ steps.semver.outputs.version }}
          name: "RaC3 APWorld v${{ steps.semver.outputs.version }}"
          body_path: release_notes.md
          prerelease: ${{ contains(steps.semver.outputs.version, '-pre') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
